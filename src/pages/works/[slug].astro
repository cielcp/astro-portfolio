---
import type { SanityDocument } from "@sanity/client";
import { sanityClient } from "sanity:client";
import imageUrlBuilder from "@sanity/image-url";
import type { SanityImageSource } from "@sanity/image-url/lib/types/types";
import { PortableText } from "astro-portabletext";

const WORK_QUERY = `*[_type == "work" && slug.current == $slug][0]`;
const work = await sanityClient.fetch<SanityDocument>(WORK_QUERY, Astro.params);

export async function getStaticPaths(): Promise<{ params: { slug: string } }> {
  const SLUGS_QUERY = `*[_type == "work" && defined(slug.current)]{
    "params": {"slug": slug.current}
  }`;
  return await sanityClient.fetch(SLUGS_QUERY, Astro.params);
}

const { projectId, dataset } = sanityClient.config();
const urlFor = (source: SanityImageSource) =>
  projectId && dataset
    ? imageUrlBuilder({ projectId, dataset }).image(source)
    : null;
const workImageUrl = work.image
  ? urlFor(work.image)?.width(550).height(310).url()
  : null;
---

<main class="container mx-auto min-h-screen max-w-3xl p-8 flex flex-col gap-4">
  <a href="/works" class="hover:underline">&larr; Back to works</a>
  {
    workImageUrl && (
      <img
        src={workImageUrl}
        alt={work.title}
        class="aspect-video rounded-xl"
        width="550"
        height="310"
      />
    )
  }
  <h1 class="text-4xl font-bold mb-8">{work.title}</h1>
  <div class="prose">
    {Array.isArray(work.body) && <PortableText value={work.body} />}
  </div>
</main>